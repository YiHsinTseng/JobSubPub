version: '3.8'

services:
  mosquitto:
    build:
      context: .
      dockerfile: Dockerfile.mq
    container_name: mosquitto
    #沒有創建mosquitto.db就無法離線
    volumes:
      - ./mosquitto/data:/mosquitto/data
    #1883在容器內已被佔用(可能是socket)
    ports:
      - "1884:1884"
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost 1884 || exit 1" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: jobs
    ports:
      - "5432:5432"
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U test -d jobs" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  scraper_service:
    build:
      context: ../
      dockerfile: Docker/Dockerfile.python
    ##取代資料夾內的.env
    env_file:
      - ./.env
    ports:
      - "5060:5060"
      - "8001:8001"
    ##保存container中的紀錄
    volumes:
      - ./scraper_service/data:/app/scraper_service/data
      - ../postgres_db:/app/postgres_db
    container_name: scraper_service
    depends_on:
      postgres:
        condition: service_healthy
      publish_service:
        condition: service_started

  job_service:
    build:
      context: ../
      dockerfile: Docker/Dockerfile.nodejs_job
    env_file:
      - ./.env
    working_dir: /app
    ports:
      - "4000:4000"
    container_name: job_service
    depends_on:
      postgres:
        condition: service_healthy
      mosquitto:
        condition: service_started

  publish_service:
    build:
      context: ../
      dockerfile: Docker/Dockerfile.nodejs_pub
    env_file:
      - ./.env
    working_dir: /app
    ports:
      - "4010:4010"
    container_name: publish_service
    depends_on:
      postgres:
        condition: service_healthy
      mosquitto:
        condition: service_started

  node_exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    ports:
      - "9100:9100"
    restart: unless-stopped
    depends_on:
      - publish_service
      - job_service
      - prometheus

  postgres_exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    restart: always
    container_name: postgres_exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://test:test@postgres:5432/jobs?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      postgres:
        condition: service_healthy
      prometheus:
        condition: service_started

  mosquitto_exporter:
    image: sapcc/mosquitto-exporter
    ports:
      - "9234:9234"
    environment:
      - "BROKER_ENDPOINT=tcp://mosquitto:1884"
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitor/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitor/data/prometheus:/prometheus
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "4050:4050"
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: 'admin'
    volumes:
      - ./monitor/data/grafana:/var/lib/grafana
      - "./monitor/config/grafana.ini:/etc/grafana/grafana.ini"
    depends_on:
      prometheus:
        condition: service_started
