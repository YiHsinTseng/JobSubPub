name: Deploy to EC2

on:
  push:
    branches:
      - test-deploying

jobs:
  Deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    env:
      PORT: ${{ vars.PORT }}
      PUB_PORT: ${{ vars.PUB_PORT }}
      PUBLISH_CRON_TIME: ${{ vars.PUBLISH_CRON_TIME }}
      CLIENT_PORT: ${{ vars.CLIENT_PORT }}
      DB_PORT: ${{ vars.DB_PORT }}
      DB_HOST: ${{ vars.DB_HOST }}
      DB_NAME: ${{ vars.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      MQTT_BROKER_URL: ${{ vars.MQTT_BROKER_URL }}
      MQTT_TOPIC: ${{ vars.MQTT_TOPIC }}
      MQTT_JOB: ${{ vars.MQTT_JOB }}
      MQTT_COMPANY: ${{ vars.MQTT_COMPANY }}
      QOS_LEVEL: ${{ vars.QOS_LEVEL }}
      PASSPORT_SECRET: ${{ secrets.PASSPORT_SECRET }}
      JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN }}
      REDIS_URL: ${{ vars.REDIS_URL }}
      LOG_FILE: ${{ vars.LOG_FILE }}

    steps:
      - name: Connect to EC2
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.EC2_HOST }} 
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }} 
          script: |
            if ! command -v git &> /dev/null; then
              echo "Git not found. Installing Git..."
              if command -v apt-get &> /dev/null; then
                sudo apt-get update && sudo apt-get install git -y
              elif command -v yum &> /dev/null; then
                sudo yum install git -y
              fi
            else
              echo "Git is already installed."
            fi

            if [ ! -d "JobSubPub" ]; then 
              git clone -b test-deploying https://github.com/YiHsinTseng/JobSubPub.git
            fi

            cd JobSubPub || exit
            git fetch origin
            git reset --hard origin/test-deploying

            if ! command -v docker &> /dev/null; then
              echo "Docker not found. Installing Docker..."
              sudo yum update -y
              sudo yum -y install docker
              sudo service docker start
              sudo systemctl enable docker
            else
              echo "Docker is already installed."
            fi

            DOCKER_COMPOSE_PATH="/usr/local/bin/docker-compose"

            if [ ! -f "$DOCKER_COMPOSE_PATH" ]; then
              echo "Docker Compose not found. Downloading..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o "$DOCKER_COMPOSE_PATH"
              sudo chmod +x "$DOCKER_COMPOSE_PATH"
            else
              echo "Docker Compose is already installed."
            fi

            cd Docker || exit
            
            rm -f .env
            touch .env
            echo PORT=$PORT > .env
            echo PUB_PORT=$PUB_PORT > .env
            echo PUBLISH_CRON_TIME=$PUBLISH_CRON_TIME > .env
            echo CLIENT_PORT=$CLIENT_PORT > .env
            echo DB_PORT=$DB_PORT > .env
            echo DB_HOST=$DB_HOST > .env
            echo DB_NAME=$DB_NAME > .env
            echo DB_USER=$DB_USER > .env
            echo DB_PASSWORD=$DB_PASSWORD > .env
            echo MQTT_BROKER_URL=$MQTT_BROKER_URL > .env
            echo MQTT_TOPIC=$MQTT_TOPIC > .env
            echo MQTT_JOB=$MQTT_JOB > .env
            echo MQTT_COMPANY=$MQTT_COMPANY > .env
            echo QOS_LEVEL=$QOS_LEVEL > .env
            echo PASSPORT_SECRET=$PASSPORT_SECRET > .env
            echo JWT_EXPIRES_IN=$JWT_EXPIRES_IN > .env
            echo REDIS_URL=$REDIS_URL > .env
            echo LOG_FILE=$LOG_FILE > .env
            cat .env

            sudo chmod 600 .env

            sudo docker system prune -a -f
            sudo docker-compose down --rmi all
            sudo docker-compose up --build -d
