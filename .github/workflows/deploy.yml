name: Deploy to EC2

on:
  push:
    branches:
      - test-deploying

jobs:
  Deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    env:
      PORT: ${{ vars.PORT }}
      PUB_PORT: ${{ vars.PUB_PORT }}
      PUBLISH_CRON_TIME: ${{ vars.PUBLISH_CRON_TIME }}
      CLIENT_PORT: ${{ vars.CLIENT_PORT }}
      DB_PORT: ${{ vars.DB_PORT }}
      DB_HOST: ${{ vars.DB_HOST }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      MQTT_BROKER_URL: ${{ vars.MQTT_BROKER_URL }}
      MQTT_TOPIC: ${{ vars.MQTT_TOPIC }}
      MQTT_JOB: ${{ vars.MQTT_JOB }}
      MQTT_COMPANY: ${{ vars.MQTT_COMPANY }}
      QOS_LEVEL: ${{ vars.QOS_LEVEL }}
      PASSPORT_SECRET: ${{ secrets.PASSPORT_SECRET }}
      JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN }}
      REDIS_URL: ${{ vars.REDIS_URL }}

    steps:
      - name: Connect to EC2
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.EC2_HOST }} 
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }} 
          script: |
            sudo apt-get update && sudo apt-get install git -y || sudo yum install git -y

            if [ ! -d "JobSubPub" ]; then 
              git clone -b test-deploying https://github.com/YiHsinTseng/JobSubPub.git
            fi

            cd JobSubPub || exit
            git fetch origin
            git reset --hard origin/test-deploying

            cat <<EOF > .env
            PORT=$PORT
            PUB_PORT=$PUB_PORT
            PUBLISH_CRON_TIME=$PUBLISH_CRON_TIME
            CLIENT_PORT=$CLIENT_PORT
            DB_PORT=$DB_PORT
            DB_HOST=$DB_HOST
            DB_USER=$DB_USER
            DB_PASSWORD=$DB_PASSWORD
            MQTT_BROKER_URL=$MQTT_BROKER_URL
            MQTT_TOPIC=$MQTT_TOPIC
            MQTT_JOB=$MQTT_JOB
            MQTT_COMPANY=$MQTT_COMPANY
            QOS_LEVEL=$QOS_LEVEL
            PASSPORT_SECRET=$PASSPORT_SECRET
            JWT_EXPIRES_IN=$JWT_EXPIRES_IN
            REDIS_URL=$REDIS_URL
            EOF

            sudo chmod 600 .env
            sudo yum update -y
            sudo amazon-linux-extras install docker -y
            sudo service docker start
            sudo systemctl enable docker
            cd Docker || exit
            sudo docker system prune -a -f
            docker-compose down --rmi all
            docker-compose up --build -d
